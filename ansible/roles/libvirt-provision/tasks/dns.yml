---

################################################################################
### DNS Configuration
################################################################################

- name: Configure a DHCP entry for VMs
  lineinfile:
    state: "{{ (libvirt_vm_state == 'create') | ternary('present', 'absent') }}"
    create: yes
    path: /etc/dhcp/vm-ansible.conf
    regexp: "^host {{ item.key }}"
    line: "host {{ item.key }} { hardware ethernet {{ item.value.mac }}; fixed-address {{ item.value.ip }}; }"
    owner: root
    group: root
    mode: '0644'
  register: __libvirt_dhcp_entries_updated
  with_dict: "{{ libvirt_vms }}"

- name: Restart DHCP service
  service:
    state: restarted
    name: dhcpd
  when: __libvirt_dhcp_entries_updated | changed

################################################################################
### DNS Configuration
################################################################################

# In a real wold: Should be done with Ansible Vault
- name: Configure DNSs for VMs
  nsupdate:
    state: "{{ (libvirt_vm_state == 'create') | ternary('present', 'absent') }}"
    server: "{{ libvirt_dns_server }}"
    type: A
    ttl: 60
    zone: "{{ libvirt_dns_zone }}"
    value: "{{ item.value.ip }}"
    record: "{{ item.key }}"
    key_name: "{{ lookup('pipe', 'grep key ' ~ libvirt_dns_key).split(' ')[1] | replace('\"', '') }}"
    key_secret: "{{ lookup('pipe', \"grep secret \" ~ libvirt_dns_key ~ \" | tr -d ';' \").split(' ')[1] | replace('\"', '') }}"
  with_dict: "{{ libvirt_vms }}"

- name: Wait for VMs to be reachable on SSH through their DNS
  wait_for:
    state: "{{ (libvirt_vm_state == 'create') | ternary('started', 'absent') }}"
    host: "{{ item.key }}.{{ libvirt_dns_zone }}"
    port: 22
    delay: 0
  with_dict: "{{ libvirt_vms }}"