---
# tasks file for libvirt-provision

# Generate MAC addresses using SHA1 on VM name
# Output:
# {
#   "ubuntu-test": {
#     "mac": "42:4d:01"
# }
#
- name: Calculate MAC addresses for VMs
  set_fact:
    __libvirt_vm_macs: >
      { "{{ item.key }}": { "mac": "{% for mac_part in (item.key | hash('sha1'))[-6:] | slice(3) %}{{ mac_part | join('') }}{{ '' if loop.last else ':' }}{% endfor %}" } }
  with_dict: "{{ libvirt_vms }}"

- name: Associate MAC address with VMs
  set_fact:
    libvirt_vms: "{{ libvirt_vms | combine(__libvirt_vm_macs, recursive=True) }}"

- name: Show the list of VMs
  debug:
    msg: "{{ libvirt_vms }}"
    verbosity: 2

################################################################################
### VM Creation and definition
################################################################################

- name: Copy the base image disk
  copy:
    src: "{{ libvirt_images_folder }}/{{ libvirt_base_image }}"
    dest: "{{ libvirt_images_folder }}/{{ item.key }}{{ (libvirt_base_image | splitext)[1] }}"
    remote_src: yes
  with_dict: "{{ libvirt_vms }}"

- name: Define VMs
  virt:
    name: "{{ item.key }}"
    command: define
    xml: "{{ lookup('template', 'libvirt-vm-template.xml.j2') }}"
  with_dict: "{{ libvirt_vms }}"

- name: Start VMs
  virt:
    state: running
    name: "{{ item.key }}"
  with_dict: "{{ libvirt_vms }}"

################################################################################
### DNS Configuration
################################################################################

- name: Add a DHCP entry for new VMs
  lineinfile:
    state: present
    create: yes
    path: /etc/dhcp/vm-ansible.conf
    insertafter: EOF
    line: "host {{ item.key }} { hardware ethernet {{ item.value.mac }}; fixed-address {{ item.value.ip }}; }"
    owner: root
    group: root
    mode: '0644'
  register: __libvirt_dhcp_entries_updated
  with_dict: "{{ libvirt_vms }}"

- name: Restart DHCP service
  service:
    state: restarted
    name: dhcpd
  when: __libvirt_dhcp_entries_updated | changed

################################################################################
### DNS Configuration
################################################################################

# In a real wold: Should be done with Ansible Vault
- name: Configure DNSs for newly created VMs
  nsupdate:
    state: present
    server: "{{ libvirt_dns_server }}"
    type: A
    ttl: 60
    zone: "{{ libvirt_dns_zone }}"
    value: "{{ libvirt_ip_prefix ~ item.value.ip }}"
    record: "{{ item.key }}"
    key_name: "{{ lookup('pipe', 'grep key ' ~ libvirt_dns_key).split(' ')[1] | replace('\"', '') }}"
    key_secret: "{{ lookup('pipe', \"grep secret \" ~ libvirt_dns_key ~ \" | tr -d ';' \").split(' ')[1] | replace('\"', '') }}"
  with_dict: "{{ libvirt_vms }}"

- name: Wait for VMs to be reachable on SSH through their DNS
  wait_for:
    state: started
    host: "{{ item.key }}.{{ libvirt_dns_zone }}"
    port: 22
    delay: 0
  with_dict: "{{ libvirt_vms }}"